import sys
import json
from port_scanner import scan_ports
from cve_api_search import search_cves



def perform_full_scan(target):
    port_scan_result = scan_ports(target)

    if "error" in port_scan_result:
        return {
            "error": f"Port scan failed: {port_scan_result['error']}",
            "vulnerable": False,
            "vulnerabilities": []
        }

    open_ports = port_scan_result.get("open_ports", [])
    all_vulns = []

    for idx, port_info in enumerate(open_ports):
        banner = port_info.get("banner", "")
        service = port_info.get("service", "")
        search_term = banner if banner else service

        if not search_term or search_term == "unknown":
            continue

        print(f"Progress: {idx + 1}/{len(open_ports)} | Searching vulnerabilities for: {search_term}", file=sys.stderr)

        try:
            vulns = search_vulnerabilities(search_term)
            if isinstance(vulns, dict):  # NVD format
                all_vulns.extend(vulns.get("vulnerabilities", []))
            elif isinstance(vulns, list):  # Vulners format
                all_vulns.extend(vulns)
        except Exception as e:
            print(f"Error searching vulnerabilities for {search_term}: {e}", file=sys.stderr)

    return {
        "target": target,
        "vulnerable": len(all_vulns) > 0,
        "vulnerabilities": all_vulns[:10],  # limit output for clarity
        "total_found": len(all_vulns)
    }

if __name__ == "__main__":
    if len(sys.argv) != 2:
        print(json.dumps({"error": "Please provide target IP or domain"}))
        sys.exit(1)

    target = sys.argv[1]
    result = perform_full_scan(target)
    print(json.dumps(result, indent=2))
